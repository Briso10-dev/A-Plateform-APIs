// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Model users
model User {
  user_id   String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String    @unique
  age       Int
  password  String
  role      Role      @default(USER)
  student Student?
  // one-many relation with factures
  factures  Facture[]
}

// model apprenants
model Student {
  student_id        String          @id @default(auto()) @map("_id") @db.ObjectId
  matricule         String?         @unique
  cni               String
  address           String
  photo             String?
  phone             String
  registration_date DateTime        @default(now())
  tutor             String
  school_level      String
  school            String?
  status            Status
  // one-one relation with user
  user              User            @relation(fields: [userId], references: [user_id])
  userId            String          @unique @db.ObjectId
  // many-many relation with project
  projects          Project[]       @relation(fields: [projectIDs], references: [project_id])
  projectIDs        String[]        @db.ObjectId
  // many-many relation with quiz
  quizz             Quiz[]          @relation(fields: [quizzeIDs], references: [quiz_id])
  quizzeIDs         String[]        @db.ObjectId
  // many-many relation with certifications
  certifications    Certification[] @relation(fields: [certificationId], references: [certification_id])
  certificationId   String[]        @db.ObjectId
  // many-many relation with exercices
  exercises         Exercices[]     @relation(fields: [exerciceIDs], references: [exercice_id])
  exerciceIDs       String[]        @db.ObjectId
  // many-many relation with cours
  cours             Course[]        @relation(fields: [coursIDs], references: [course_id])
  coursIDs          String[]        @db.ObjectId
}

// model projet
model Project {
  project_id  String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  // one-one relation with student
  studentIDs  String[]  @db.ObjectId
  students    Student[] @relation(fields: [studentIDs], references: [student_id])
}

// Model certifications
model Certification {
  certification_id String    @id @default(auto()) @map("_id") @db.ObjectId
  title            String    @unique
  description      String
  date_issued      String
  //many-many relation with student
  studentIDs       String[]  @db.ObjectId
  students         Student[] @relation(fields: [studentIDs], references: [student_id])
}

// Model cours
model Course {
  course_id   String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  content     String
  quizzes     String
  price       String
  // many-many relation with student
  studentIDs  String[]    @db.ObjectId
  students    Student[]   @relation(fields: [studentIDs], references: [student_id])
  // one-many relation with exercices
  exercices   Exercices[]
  // one-many relation with quizzes
  quiz        Quiz[]
}

// model quizzes
model Quiz {
  quiz_id         String    @id @default(auto()) @map("_id") @db.ObjectId
  questions       String
  passing_score   String
  // many-many relation with student
  student         Student[] @relation(fields: [studentIDs], references: [student_id])
  studentIDs      String[]  @db.ObjectId
  // one-many relation with courses
  affected_quizID String    @db.ObjectId
  affected_quiz   Course    @relation(fields: [affected_quizID], references: [course_id])
}

// model exercices
model Exercices {
  exercice_id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String
  due_date          String
  submissions       String
  //many-many relation with student
  studentIDs        String[]  @db.ObjectId
  students          Student[] @relation(fields: [studentIDs], references: [student_id])
  // one-many relation with course
  affected_courseID String    @db.ObjectId
  affected_course   Course    @relation(fields: [affected_courseID], references: [course_id])
}

// Model facture
model Facture {
  invoice_id      String   @id @default(auto()) @map("_id") @db.ObjectId
  amount          Int
  status          String
  due_date        DateTime
  //one-many relation with users
  affected_userID String   @db.ObjectId
  affected_user   User     @relation(fields: [affected_userID], references: [user_id])
}

// enumerations lists
enum Role {
  SUPERADMIN
  ADMIN
  USER
  STUDENT
}

enum Status {
  STUDENT
  PROFESSIONAL
  OTHER
}

// types lists
type Tutor {
  mother String
  father String
  other  String
}
